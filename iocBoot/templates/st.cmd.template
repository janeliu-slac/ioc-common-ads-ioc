#!{{hashbang}}
################### AUTO-GENERATED DO NOT EDIT ###################
{%  set production_ioc = production_ioc | int %}
{%- set project, plc = get_plc_by_name(projects, plc) -%}
{% if plc.name is not defined %}
# PLC name invalid or not found in project.
# Double-check Makefile setting "PLC" and compare with TwinCAT.
{% else %}
{%- set plc_host = plc_hostname_override or plc.target_ip %}
{%- set plc_ams_net_id = plc_ams_net_id_override or plc.ams_id %}
#
#         Project: {{ project.filename.name }}
#        PLC name: {{ plc.name }} ({{ plc.link_name }})
# Generated using: pytmc {{ pytmc_version}}
# Project version: {{ project.git_info.describe }}
#    Project hash: {{ project.git_info.sha }}
{% if plc_hostname_override %}
#     PLC IP/host: {{ plc_hostname_override }} (Specified in Makefile; project has: {{ plc.target_ip }})
{% else %}
#     PLC IP/host: {{ plc.target_ip}}
{% endif %}
{% if plc_ams_net_id_override %}
#      PLC Net ID: {{ plc_ams_net_id_override }} (Specified in Makefile; project has: {{ plc.ams_id }})
{% else %}
#      PLC Net ID: {{ plc.ams_id}}
{% endif %}
{% if production_ioc %}
#  ** Production mode IOC **
#  Using /cds/data/iocData for autosave and archiver settings.
{% else %}
# ** DEVELOPMENT MODE IOC **
# * Using IOC boot directory for autosave.
# * Archiver settings will not be configured.
{% endif %}
#
# Libraries:
#
{% for library, info in get_library_versions(plc) | dictsort %}
{% if "PlaceholderReference" in info and "PlaceholderResolution" in info %}
#   {{ library }}: {{ info.PlaceholderReference.version }} -> {{ info.PlaceholderResolution.version }} ({{ info.PlaceholderResolution.vendor }})
{% elif "PlaceholderReference" in info %}
#   {{ library }}: {{ info.PlaceholderReference.version }} ({{ info.PlaceholderReference.vendor }})
{% endif %}
{% endfor %}
#
################### AUTO-GENERATED DO NOT EDIT ###################
# Run common startup commands for linux soft IOC's
< $(IOC_COMMON)/All/pre_linux.cmd

{%- if plc.tmc %}

{%- set allow_errors = ignore_linter_errors | int %}
{%- set db_filenames, records = generate_records(plc, allow_errors=allow_errors) %}
{%- set num_records = records | length %}
{%- set max_params = num_records + 1000 %}

{%- else %}

{%- set db_filenames = [] %}
{%- set records = {} %}
{%- set num_records = 0 %}
{%- set max_params = 10000 %}

{%- endif %}

< envPaths

epicsEnvSet("ADS_IOC_TOP", "$(TOP)" )

epicsEnvSet("ENGINEER", "{{user}}" )
epicsEnvSet("LOCATION", "{{prefix}}" )
epicsEnvSet("IOCSH_PS1", "$(IOC)> " )
epicsEnvSet("ACF_FILE", "$(ADS_IOC_TOP)/iocBoot/templates/unrestricted.acf")

{% if production_ioc %}
# Run common startup commands for linux soft IOC's
< /reg/d/iocCommon/All/pre_linux.cmd

{% endif %}
# Register all support components
dbLoadDatabase("$(ADS_IOC_TOP)/dbd/adsIoc.dbd")
adsIoc_registerRecordDeviceDriver(pdbbase)

epicsEnvSet("ASYN_PORT",        "ASYN_PLC")
epicsEnvSet("IPADDR",           "{{ plc_host }}")
epicsEnvSet("AMSID",            "{{ plc_ams_net_id }}")
epicsEnvSet("AMS_PORT",         "{{ plc.port }}")
epicsEnvSet("ADS_MAX_PARAMS",   "{{ max_params }}")
epicsEnvSet("ADS_SAMPLE_MS",    "50")
epicsEnvSet("ADS_MAX_DELAY_MS", "100")
epicsEnvSet("ADS_TIMEOUT_MS",   "1000")
epicsEnvSet("ADS_TIME_SOURCE",  "0")

{% if add_plc_route | int != 0 %}
# Add a route to the PLC automatically:
system("${ADS_IOC_TOP}/scripts/add_route.sh {{ plc_host }} {{ ioc_host_ip_regex }}")

{% endif %}
# adsAsynPortDriverConfigure(portName, ipaddr, amsaddr, amsport,
#    asynParamTableSize, priority, noAutoConnect, defaultSampleTimeMS,
#    maxDelayTimeMS, adsTimeoutMS, defaultTimeSource)
# portName            Asyn port name
# ipAddr              IP address of PLC
# amsaddr             AMS Address of PLC
# amsport             Default AMS port in PLC (851 for first PLC)
# paramTableSize      Maximum parameter/variable count. (1000)
# priority            Asyn priority (0)
# noAutoConnect       Enable auto connect (0=enabled)
# defaultSampleTimeMS Default sample of variable (PLC ams router
#                     checks if variable changed, if changed then add to send buffer) (50ms)
# maxDelayTimeMS      Maximum delay before variable that has changed is sent to client
#                     (Linux). The variable can also be sent sooner if the ams router
#                     send buffer is filled (100ms)
# adsTimeoutMS        Timeout for adslib commands (1000ms)
# defaultTimeSource   Default time stamp source of changed variable (PLC=0):
#                     PLC=0: The PLC time stamp from when the value was
#                         changed is used and set as timestamp in the EPICS record
#                         (if record TSE field is set to -2=enable asyn timestamp).
#                         This is the preferred setting.
#                     EPICS=1: The time stamp will be made when the updated data
#                         arrives in the EPICS client.
adsAsynPortDriverConfigure("$(ASYN_PORT)", "$(IPADDR)", "$(AMSID)", "$(AMS_PORT)", "$(ADS_MAX_PARAMS)", 0, 0, "$(ADS_SAMPLE_MS)", "$(ADS_MAX_DELAY_MS)", "$(ADS_TIMEOUT_MS)", "$(ADS_TIME_SOURCE)")

cd "$(ADS_IOC_TOP)/db"

{% set motors = get_motors(plc) %}
{% if motors %}
{%- set nc = get_nc(project) %}

epicsEnvSet("MOTOR_PORT",     "PLC_ADS")
epicsEnvSet("PREFIX",         "{{prefix}}{{pv_delimiter}}")
epicsEnvSet("NUMAXES",        "{{nc.axis_by_id|max}}")
epicsEnvSet("MOVE_POLL_RATE", "200")
epicsEnvSet("IDLE_POLL_RATE", "1000")

EthercatMCCreateController("$(MOTOR_PORT)", "$(ASYN_PORT)", "$(NUMAXES)", "$(MOVE_POLL_RATE)", "$(IDLE_POLL_RATE)")

#define ASYN_TRACE_ERROR     0x0001
#define ASYN_TRACEIO_DEVICE  0x0002
#define ASYN_TRACEIO_FILTER  0x0004
#define ASYN_TRACEIO_DRIVER  0x0008
#define ASYN_TRACE_FLOW      0x0010
#define ASYN_TRACE_WARNING   0x0020
#define ASYN_TRACE_INFO      0x0040
asynSetTraceMask("$(ASYN_PORT)", -1, 0x41)

#define ASYN_TRACEIO_NODATA 0x0000
#define ASYN_TRACEIO_ASCII  0x0001
#define ASYN_TRACEIO_ESCAPE 0x0002
#define ASYN_TRACEIO_HEX    0x0004
asynSetTraceIOMask("$(ASYN_PORT)", -1, 2)

#define ASYN_TRACEINFO_TIME 0x0001
#define ASYN_TRACEINFO_PORT 0x0002
#define ASYN_TRACEINFO_SOURCE 0x0004
#define ASYN_TRACEINFO_THREAD 0x0008
asynSetTraceInfoMask("$(ASYN_PORT)", -1, 5)

#define AMPLIFIER_ON_FLAG_CREATE_AXIS  1
#define AMPLIFIER_ON_FLAG_WHEN_HOMING  2
#define AMPLIFIER_ON_FLAG_USING_CNEN   4

{% for motor in motors | sort(attribute='nc_axis.axis_number') %}
epicsEnvSet("AXIS_NO",         "{{motor.nc_axis.axis_number}}")
epicsEnvSet("MOTOR_PREFIX",    "{{motor|epics_prefix}}")
epicsEnvSet("MOTOR_NAME",      "{{motor|epics_suffix}}")
epicsEnvSet("DESC",            "{{motor.name}} / {{motor.nc_axis.name}}")
epicsEnvSet("EGU",             "{{motor.nc_axis.units}}")
epicsEnvSet("PREC",            "{{motor|pragma('precision', 3) }}")
epicsEnvSet("AXISCONFIG",      "{{motor|pragma('axisconfig', '')}}")
epicsEnvSet("ECAXISFIELDINIT", "{{motor|pragma('additional_fields', '') }}")
epicsEnvSet("AMPLIFIER_FLAGS", "{{motor|pragma('amplifier_flags', '') }}")

EthercatMCCreateAxis("$(MOTOR_PORT)", "$(AXIS_NO)", "$(AMPLIFIER_FLAGS)", "$(AXISCONFIG)")
dbLoadRecords("EthercatMC.template", "PREFIX=$(MOTOR_PREFIX), MOTOR_NAME=$(MOTOR_NAME), R=$(MOTOR_NAME)-, MOTOR_PORT=$(MOTOR_PORT), ASYN_PORT=$(ASYN_PORT), AXIS_NO=$(AXIS_NO), DESC=$(DESC), PREC=$(PREC), EGU=$(EGU) $(ECAXISFIELDINIT)")
dbLoadRecords("EthercatMCreadback.template", "PREFIX=$(MOTOR_PREFIX), MOTOR_NAME=$(MOTOR_NAME), R=$(MOTOR_NAME)-, MOTOR_PORT=$(MOTOR_PORT), ASYN_PORT=$(ASYN_PORT), AXIS_NO=$(AXIS_NO), DESC=$(DESC), PREC=$(PREC) ")
dbLoadRecords("EthercatMCdebug.template", "PREFIX=$(MOTOR_PREFIX), MOTOR_NAME=$(MOTOR_NAME), MOTOR_PORT=$(MOTOR_PORT), AXIS_NO=$(AXIS_NO), PREC=3")

{% endfor %}
{% endif %}

dbLoadRecords("iocSoft.db", "IOC={{prefix}}")
dbLoadRecords("save_restoreStatus.db", "P={{prefix}}{{pv_delimiter}}")
dbLoadRecords("caPutLog.db", "IOC=$(IOC)")

## TwinCAT task, application, and project information databases ##
{% for priority, (_, task) in plc.instance.task_pous.items() %}
dbLoadRecords("TwinCAT_TaskInfo.db", "PORT=$(ASYN_PORT),PREFIX={{prefix}},IDX={{task.array_index}},TASK_PORT={{ task.attributes.AmsPort }}")
{% endfor %}
dbLoadRecords("TwinCAT_AppInfo.db", "PORT=$(ASYN_PORT), PREFIX={{prefix}}")

{% set git_sha = project.git_info.sha or "" %}
{%- set short_git_sha = git_sha[:7] %}
dbLoadRecords("TwinCAT_Project.db", "PREFIX={{prefix}},PROJECT={{ project.filename.name }},HASH={{ short_git_sha }},VERSION={{ project.git_info.describe }},PYTMC={{ pytmc_version}},PLC_HOST={{ plc_host }}")

{% for library, info in get_library_versions(plc) | dictsort %}
{%- set libraryname = library | replace(" ", "_") %}
{%- if "PlaceholderReference" in info and "PlaceholderResolution" in info %}
#   {{ library }}: {{ info.PlaceholderReference.version }} -> {{ info.PlaceholderResolution.version }} ({{ info.PlaceholderResolution.vendor }})
dbLoadRecords("TwinCAT_Dependency.db", "PREFIX={{prefix}},DEPENDENCY={{ libraryname }},VERSION={{ info.PlaceholderResolution.version }},VENDOR={{ info.PlaceholderResolution.vendor }}")
{% elif "PlaceholderReference" in info %}
#   {{ library }}: {{ info.PlaceholderReference.version }} ({{ info.PlaceholderReference.vendor }})
dbLoadRecords("TwinCAT_Dependency.db", "PREFIX={{prefix}},DEPENDENCY={{ libraryname }},VERSION={{ info.PlaceholderReference.version }},VENDOR={{ info.PlaceholderReference.vendor }}")
{% endif %}
{%- endfor %}

cd "$(IOC_TOP)"

## PLC Project Database files ##
{% if plc.tmc %}
{% for db in db_filenames %}
dbLoadRecords("{{ db }}", "PORT=$(ASYN_PORT),{{ db_parameters }}")
{% endfor %}
{%- set queue_size_base = queue_size_base | int %}
{%- set queue_size_scale = queue_size_scale | int %}
{%- set callback_queue_size = queue_size_base + queue_size_scale * num_records %}

# Total records: {{ records | length }}
callbackSetQueueSize({{ callback_queue_size }})
{% endif %}

{% if additional_db_files %}
{% for db in additional_db_files.split(" ") %}
# Load user-specified database: {{ db }}
dbLoadRecords("{{ db }}", "PORT=$(ASYN_PORT),{{ db_parameters }}")
{% endfor %}

{% endif %}
# Autosave and archive settings:
save_restoreSet_status_prefix("{{prefix}}{{pv_delimiter}}")
save_restoreSet_IncompleteSetsOk(1)
save_restoreSet_DatedBackupFiles(1)
set_pass0_restoreFile("info_positions.sav")
set_pass1_restoreFile("info_settings.sav")

{% if production_ioc %}
# ** Production IOC Settings **
set_savefile_path("$(IOC_DATA)/$(IOC)/autosave")
set_requestfile_path("$(IOC_DATA)/$(IOC)/autosave")

# Production IOC autosave files go in iocData:
cd "$(IOC_DATA)/$(IOC)/autosave"

# Create info_positions.req and info_settings.req
makeAutosaveFiles()

cd "$(IOC_DATA)/$(IOC)/archive"

# Create $(IOC).archive
makeArchiveFromDbInfo("$(IOC).archive", "archive")
cd "$(IOC_TOP)"
{% else %}
# ** Development IOC Settings **
# Development IOC autosave and archive files go in the IOC top directory:
cd "$(IOC_TOP)"

# (Development mode) Create info_positions.req and info_settings.req
makeAutosaveFiles()
# (Development mode) Create the archiver file
makeArchiveFromDbInfo("$(IOC).archive", "archive")
{% endif %}

# Configure access security: this is required for caPutLog.
asSetFilename("$(ACF_FILE)")

# Initialize the IOC and start processing records
iocInit()

# Enable logging
iocLogInit()

# Configure and start the caPutLogger after iocInit
epicsEnvSet(EPICS_AS_PUT_LOG_PV, "$(IOC):caPutLog:Last")

# caPutLogInit("HOST:PORT", config)
# config options:
#       caPutLogNone       -1: no logging (disable)
#       caPutLogOnChange    0: log only on value change
#       caPutLogAll         1: log all puts
#       caPutLogAllNoFilter 2: log all puts no filtering on same PV
caPutLogInit("$(EPICS_CAPUTLOG_HOST):$(EPICS_CAPUTLOG_PORT)", 0)

# Start autosave backups
create_monitor_set( "info_positions.req", 10, "" )
create_monitor_set( "info_settings.req", 60, "" )
{% if production_ioc %}

# All IOCs should dump some common info after initial startup.
< /reg/d/iocCommon/All/post_linux.cmd
{% endif %}
{% endif %}
